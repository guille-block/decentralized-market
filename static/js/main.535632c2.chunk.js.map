{"version":3,"sources":["components/nav.jsx","components/main.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Nav","_ref","account","react_default","a","createElement","className","Main","productName","productPrice","createProduct","products","buyProduct","web3","Web3","window","ethereum","id","onSubmit","e","preventDefault","name","value","price","utils","toWei","toString","type","ref","input","placeholder","required","scope","map","product","key","fromWei","owner","onClick","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","loadBlockchain","console","log","state","stop","_callee2","netId","market","count","i","_context2","enable","eth","net","getId","sent","getAccounts","setState","Market","networks","Contract","abi","address","methods","productCount","toNumber","concat","toConsumableArray","alert","loading","callProducts","_callee3","_context3","listProduct","send","from","once","transactionHash","nav","role","main","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.535632c2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Nav = ({account}) => {\r\n    return(\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <small className=\"navbar-brand\">{account}</small>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default Nav","import React from 'react'\r\nimport Web3 from 'web3'\r\nimport './App.css'\r\n\r\nconst Main = ({createProduct, products, buyProduct}) => {\r\n\r\n    const web3 = new Web3(window.ethereum)\r\n    let productName, productPrice\r\n    \r\n    return (\r\n        <div id= 'content' className ='conten-align-center'>\r\n                <h1>Welcome to Block Market</h1>\r\n                <h3>Add the product you want to sell</h3>\r\n                <form onSubmit = {e => {\r\n                    e.preventDefault()\r\n                    const web3 = new Web3(window.ethereum);\r\n                    const name = productName.value\r\n                    const price = web3.utils.toWei(productPrice.value.toString(), 'Ether')\r\n                    createProduct(name, price)\r\n                    }}>\r\n                    <div className=\"form-group mr-sm-2\">\r\n                        <input \r\n                            id = \"productName\"\r\n                            type=\"text\" \r\n                            ref = {(input) => {productName = input}}\r\n                            className=\"form-control\" \r\n                            placeholder=\"Product name\"\r\n                            required/>\r\n                    </div>\r\n                    <div className=\"form-group mr-sm-2\">\r\n                        <input \r\n                            id=\"productPrice\" \r\n                            type=\"text\" \r\n                            ref = {(input) => {productPrice = input}}\r\n                            className=\"form-control\" \r\n                            placeholder=\"Product price\"\r\n                            required/>\r\n                    </div >\r\n                    <button type= 'submit' className=\"btn btn-primary\">Add</button>\r\n                </form>\r\n                <h3>Buy products</h3>\r\n                <table className= 'table'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Owner</th>\r\n                            <th scope=\"col\">Option</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {products.map((product, key) => {\r\n                            return (\r\n                                <tr key ={key}>\r\n                                    <th scope=\"col\">{product.id.toString()}</th>\r\n                                    <th scope=\"col\">{product.name}</th>\r\n                                    <th scope=\"col\">{web3.utils.fromWei(product.price.toString(), 'ether') + ' ETH'}</th>\r\n                                    <th scope=\"col\">{product.owner}</th>\r\n                                    <th scope=\"col\">\r\n                                        <button className ='btn btn-success'\r\n                                        onClick = {e => {\r\n                                            const id = product.id\r\n                                            const price = product.price.toString()\r\n                                            buyProduct(id, price)}}>\r\n                                            Buy\r\n                                        </button>\r\n                                        </th>\r\n                                </tr>\r\n                            )})}\r\n                    </tbody>\r\n                </table>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Main","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\nimport Market from '../abis/Market.json'\r\nimport './App.css';\r\nimport Nav from './nav'\r\nimport Main from './main'\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount = async () => {\r\n    await this.loadBlockchain()\r\n    console.log(this.state.products)\r\n  }\r\n\r\n  loadBlockchain = async () => {\r\n     if(typeof window.ethereum !== 'undefined') {\r\n          const web3 = new Web3(window.ethereum);\r\n          window.ethereum.enable()\r\n          const netId = await web3.eth.net.getId()\r\n          console.log(netId)\r\n          const account = await web3.eth.getAccounts()\r\n          this.setState({account: account[0]})\r\n          console.log(account[0])\r\n          if(Market.networks[netId]) {\r\n            const market = await web3.eth.Contract(Market.abi, Market.networks[netId].address)\r\n            this.setState({market})\r\n            const count = await market.methods.productCount().call()\r\n            console.log(count.toNumber())\r\n            this.setState({productCount: count.toNumber()})\r\n        \r\n            for(var i=1; i<=count; i++){\r\n              const product = await market.methods.products(i).call()\r\n              console.log(product)\r\n              this.setState({products: [...this.state.products,product]})\r\n            }\r\n          } else {\r\n            alert('connect to a different Blockchain')\r\n          }\r\n          \r\n          this.setState({loading: false})\r\n      } else {\r\n        window.alert('Please install metamask :)')\r\n      }\r\n}\r\n\r\nconstructor(props){\r\n  super(props) \r\n    this.state = {\r\n      account: '',\r\n      loading: true,\r\n      productCount: 0,\r\n      products: []\r\n    }\r\n}\r\n\r\ncallProducts = async () => {\r\n  const count = await this.state.market.methods.productCount().call()\r\n  this.setState({productCount: count.toNumber()})\r\n  for(var i=0; i<=count; i++){\r\n    const product = await this.state.market.methods.products(i).call()\r\n    this.setState({products: [...this.state.products,product]})\r\n    }\r\n}\r\n\r\ncreateProduct = (name, price) => {\r\n  this.setState({loading: true})\r\n  this.state.market.methods.listProduct(name, price).send({from: this.state.account })\r\n    .once('transactionHash', (transactionHash) => {\r\n      this.setState({loading: false})\r\n      \r\n    })\r\n}\r\n\r\nbuyProduct = (id, price) => {\r\n  this.setState({loading: true})\r\n  this.state.market.methods.buyProduct(id).send({from: this.state.account, value: price})\r\n  .once('transactionHash', (transactionHash) => {\r\n    this.setState({loading: false})\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav account = {this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n              {\r\n                this.state.loading \r\n                ? <div id = \"loader\"><p>Loading....</p></div> \r\n                : <Main \r\n                  createProduct = {this.createProduct}\r\n                  products ={this.state.products}\r\n                  buyProduct={this.buyProduct}/>\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}